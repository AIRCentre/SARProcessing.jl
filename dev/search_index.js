var documenterSearchIndex = {"docs":
[{"location":"Sentinel1/#Sentinel1","page":"Sentinel1","title":"Sentinel1","text":"","category":"section"},{"location":"Sentinel1/","page":"Sentinel1","title":"Sentinel1","text":"Modules = [Sentinel1]","category":"page"},{"location":"Sentinel1/#Main.Sentinel1.AzimuthFmRate","page":"Sentinel1","title":"Main.Sentinel1.AzimuthFmRate","text":"AzimuthFmRate\n\nreturns structure of AzimuthFmRate from metadata in .xml AzimuthFmRate is calculated for each burst, and is therefore saved in each burst\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.AzimuthFmRate-Tuple{Any, Dates.DateTime, Dates.Millisecond}","page":"Sentinel1","title":"Main.Sentinel1.AzimuthFmRate","text":"\" AzimuthFmRate\n\nConstucture for the AzimuthFmRate structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the AzimuthFmRate data for a single burst as a structure. \nThe AzimuthFmRate structure returns the following:\n        burstNumber::Int64\n        fmTimesDiff::Vector{Millisecond}\n        bestFmIndex::Int64\n        azimuthFmRatePolynomial::Vector{Float64}\n        azimuthFmRateT0::Float64\n\nThe burstNumber can be used as a key to other burst specific strucutres, e.g., the Burst data.\n\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n    dopplerCentroid[DopplerCentroid]: DopplerCentroid Structure\n\n\noutput:\n    azimuthFmRate[structure of AzimuthFmRate]\n\nNote:\n    [ ] Perhaps change input vars from strutures to the specific values. -- Does the current implementaion use extra time?\n    [ ] What is needed? Maybe, e.g., azimuthFmRatePolynomial is redudant in the later processing. Could then be deleted.\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.Burst","page":"Sentinel1","title":"Main.Sentinel1.Burst","text":"Burst\n\nreturns structure of Burst from metadata in .xml Burst contain information from DopplerCentroid and AzimuthFmRate\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.Burst-2","page":"Sentinel1","title":"Main.Sentinel1.Burst","text":"\" Burst\n\nConstucture for the Burst structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the Burst specific data for a single burst as a structure. \nThe Burst structure returns the following:\n    burstNumber::Int64\n    azimuthTime::DateTime : Zero Doppler azimuth time of the first line of this burst [UTC]. \n    sensingTime::DateTime : Sensing time of the first input line of this burst [UTC].\n    azimuthAnxTime::Float64 : Zero Doppler azimuth time of the first line of this burst relative to the Ascending Node Crossing (ANX) time. [milli sec].\n    byteOffset::Int64.:  Byte offset of this burst within the image MDS.\n    firstValidSample::Vector{Int64}: An array of integers indicating the offset of the first valid image sample within each range line. This array contains count attribute integers, equal to the linesPerBurst field (i.e. one value per range line within the burst), separated by spaces. If a range line does not contain any valid image samples, the integer is set to -1.\n    lastValidSample::Vector{Int64}: An array of integers indicating the offset of the last valid image sample within each range line. This array contains count attribute integers, equal to the linesPerBurst (i.e. one value per range line within the burst), separated by spaces. If a range line does not contain any valid image samples, the integer is set to -1.\n    burstId::Int64\n    absoluteBurstId::Int64\n    fmTimesDiff::Vector{Millisecond}\n    bestFmIndex::Int64\n    azimuthFmRatePolynomial::Vector{Float64}\n    azimuthFmRateT0::Float64\n    numberOfDopplerCentroids::Int64\n    burstTime::Millisecond\n    burstMidTime::Millisecond\n    dcTimeDifferences::Vector{Millisecond}\n    bestDcIndex::Int64\n    dataDcPolynomial::Vector{Float64}\n    dcT0::Float64\n    firstLineMosaic::Int64\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n    burstNumber[Int]: Integer value of burst number.\n\n\noutput:\n    Burst[structure of Burst]\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.BurstsInfo","page":"Sentinel1","title":"Main.Sentinel1.BurstsInfo","text":"BurstsInfo\n\nReturns a structure, BurstsInfo, containing info of each burst. For each bust, the following is saved in a Vector:     - Burst: Structure of Burst.\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.BurstsInfo-Tuple{Any}","page":"Sentinel1","title":"Main.Sentinel1.BurstsInfo","text":"\" BurstsInfo\n\nConstucture for the BurstsInfo structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the BurstsInfo data for a all bursts as a structure. \nThe burst info has the info and derived data for each bursts.\n\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n\noutput:\nburstinfo[structure of BurstsInfo]\n\nNote:\n    Instead of vector{strucutre} consider another type???\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.DopplerCentroid","page":"Sentinel1","title":"Main.Sentinel1.DopplerCentroid","text":"DopplerCentroid\n\nreturns structure of DopplerCentroid from metadata in .xml DopplerCentroid is calculated for each burst, and is therefore saved in each burst\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.DopplerCentroid-Tuple{Any, Dates.DateTime, Dates.DateTime, Int64, Float64}","page":"Sentinel1","title":"Main.Sentinel1.DopplerCentroid","text":"\" DopplerCentroid\n\nConstucture for the DopplerCentroid structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the DopplerCentroid data for a single burst as a structure. \nThe DopplerCentroid structure returns the following:\n    numberOfDopplerCentroids::Int64\n    burstTime::Millisecond\n    burstMidTime::Millisecond\n    dcTimeDifferences::Vector{Millisecond}\n    bestDcIndex::Int64\n    dataDcPolynomial::Vector{Float64}\n    dcT0::Float64\n    firstLineMosaic::Int64\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n    burst.azimuthTime\n    header.startTime\n    swathtiming.linesPerBurst\n    imageInformation.azimuthFrequency\n\n\noutput:\n    DopplerCentroid[structure of DopplerCentroid]\n\nNote:\n    [ ] Perhaps change input vars from strutures to the specific values. -- Does the current implementaion use extra time?\n    [ ] What is needed? Maybe, e.g., dataDcPolynomial is redudant in the later processing. Could be deleted.\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.GeolocationGrid","page":"Sentinel1","title":"Main.Sentinel1.GeolocationGrid","text":"GeolocationGrid\n\nreturns structure of GeolocationGrid from metadata in .xml\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.GeolocationGrid-Tuple{Any}","page":"Sentinel1","title":"Main.Sentinel1.GeolocationGrid","text":"\" GeolocationGrid\n\nConstucture for the GeolocationGrid structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the GeolocationGrid as a structure. Input in the GeolocationGrid file:\n    lines: Reference image MDS line to which this geolocation grid point applies.\n    samples,\n    latitude: Geodetic latitude of grid point [degrees].\n    longitude: Geodetic longitude of grid point [degrees].\n    azimuthTime: Zero Doppler azimuth time to which grid point applies [UTC].\n    slantRangeTime: Two-way slant range time to grid point [milli sec].\n    elevationAngle: Elevation angle to grid point [degrees].\n    incidenceAngle: Incidence angle to grid point [degrees].\n    height: Height of the grid point above sea level [m].\n\nExample:\n    # accesing the geolocation data from the full metadata.\n    xmlPath = \"s1a-iw1-slc-vh-20220220t144146-20220220t144211-041998-050092-001.xml\"\n    Metadata1 = MetaDataSentinel1(xmlPath)\n    geolocation = Metadata1.geolocation\n\n    # accessing the geolocation directly from the xml.\n    metaDict = getDictofXml(xmlPath)\n    geolocation = GeolocationGrid(metaDict)\n    \n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n\noutput:\n    GeolocationGrid[structure of GeolocationGrid]\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.Header","page":"Sentinel1","title":"Main.Sentinel1.Header","text":"Header\n\nreturns structure of Header from metadata in .xml\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.Header-Tuple{Any}","page":"Sentinel1","title":"Main.Sentinel1.Header","text":"\" Header\n\nConstucture for the Header structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the Header as a structure. Input in the header file:\n    missionId: Mission identifier for this data set.\n    productType: Product type for this data set.\n    polarisation: Polarisation for this data set.\n    missionDataTakeId: Mission data take identifier.\n    swath: Swath identifier for this data set. This element identifies the swath that applies to all data contained within this data set. The swath identifier \"EW\" is used for products in which the 5 EW swaths have been merged. Likewise, \"IW\" is used for products in which the 3 IW swaths have been merged.\n    mode: Sensor mode for this data set.\n    startTime: Zero Doppler start time of the output image [UTC].\n    stopTime: Zero Doppler stop time of the output image [UTC].\n    aqusitionTime,\n    absoluteOrbitNumber: Absolute orbit number at data set start time.\n    imageNumber: Image number. For WV products the image number is used to distinguish between vignettes. For SM, IW and EW modes the image number is still used but refers instead to each swath and polarisation combination (known as the 'channel') of the data.\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n\noutput:\n    Header[structure of Header]\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.ImageInformation","page":"Sentinel1","title":"Main.Sentinel1.ImageInformation","text":"ImageInformation\n\nreturns structure of ImageInformation from metadata in .xml\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.ImageInformation-Tuple{Any}","page":"Sentinel1","title":"Main.Sentinel1.ImageInformation","text":"\" ImageInformation\n\nConstucture for the ImageInformation structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the ImageInformation as a structure. Input in the ImageInformation file:\n    rangePixelSpacing: Pixel spacing between range samples [m].\n    azimuthFrequency: Azimuth line frequency of the output image [Hz]. This is the inverse of the azimuthTimeInterval.\n    slantRangeTime: Two-way slant range time to first sample [milli sec].\n    incidenceAngleMidSwath: Incidence angle at mid swath [degrees].\n    azimuthPixelSpacing: Nominal pixel spacing between range lines [m].\n    numberOfSamples: Total number of samples in the output image (image width).\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n\noutput:\n    ImageInformation[structure of ImageInformation]\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.MetaDataSLC","page":"Sentinel1","title":"Main.Sentinel1.MetaDataSLC","text":"SwathSLC\n\nA datatype for a Sentinel 1 Single Look Complex (SLC) swath subset. \n\nArguments\n\nmetadata::MetaDataSLC: Meta data for the Sentinel 1 swath\nindexOffset::Tuple{Int,Int}: Pixel offeset of the subset with respect to the complete swath\npixels::Array{Complex,2}: The pixel values of the swath subset\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.MetaDataSentinel1","page":"Sentinel1","title":"Main.Sentinel1.MetaDataSentinel1","text":"MetaDataSentinel1:     Metadata structure for the Sentinel-1 satellite for each burst in the swath.\n\nGeneral metadata info is kept in the following structures:\n    - Header\n    - ProductInformation\n    - ImageInformation\n    - SwathTiming\n    - GeolocationGrid\nBurst specific Info is kept in \n    - BurstsInfo\nWhere BurstsInfo is a structure:\n    numberOfBurst::Int64\n    bursts::Vector{Burst}\n\nExample:     slcMetadata = MetaDataSentinel1(metaDict)\n\nInput:\n    metaDict: xml file.\n\ncan be accesed as, e.g., \nslcMetadata.product.radarFrequency --> 5.40500045433435e9::Float64\nslcMetadata.header.swath --> 1::Int\nslcMetadata.header.mode --> \"IW\"::String\nslcMetadata.header.polarisation --> \"VH\"::String\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.MetaDataSentinel1-Tuple{String}","page":"Sentinel1","title":"Main.Sentinel1.MetaDataSentinel1","text":"\" MetaDataSentinel1\n\nConstucture for the MetaDataSentinel1 structure. \nIt takes a Sentinel-1 single swath metafile in .xml format and constructs the metadata structure using the individual sub-structures in the metadata.\nThe individual sub-structures in the metadata are:\n- Header\n- ProductInformation\n- ImageInformation\n- SwathTiming\n- Burst\n- GeolocationGrid\n\nInput:\n    xmlFile[string]: path of swath specific metadata in xml.format.\n\noutput:\n    MetaDataSentinel1[structure of MetaDataSentinel1]: Strucutre with all Sentinel-1 metadata for a swath.\n\n\nExample:\n\nGetting the azimuthFmRateT0 for the 5th burst:\n    metadata = MetaDataSentinel1(annotation.xml)\n    metadata.burstsInfo.azimuthFmRate[5].azimuthFmRateT0\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.ProductInformation","page":"Sentinel1","title":"Main.Sentinel1.ProductInformation","text":"ProductInformation\n\nreturns structure of product information \n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.ProductInformation-Tuple{Any}","page":"Sentinel1","title":"Main.Sentinel1.ProductInformation","text":"\" ProductInformation\n\nConstucture for the ProductInformation structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the ProductInformation as a structure. ProductInformation file:\n    pass: Direction of the orbit (ascending, descending)\n    timelinessCategory: Timeliness category under which the product was produced, i.e. time frame from the data acquisition\n    platformHeading: Platform heading relative to North [degrees].\n    projection: Projection of the image, either slant range or ground range.\n    rangeSamplingRate: Range sample rate [Hz]\n    radarFrequency: Radar (carrier) frequency [Hz]\n    azimuthSteeringRate: Azimuth steering rate for IW and EW modes [degrees/s].\n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n\noutput:\n    ProductInformation[structure of ProductInformation]\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.SwathSLC","page":"Sentinel1","title":"Main.Sentinel1.SwathSLC","text":"SwathSLC\n\nA datatype for a Sentinel 1 Single Look Complex (SLC) swath subset. \n\n# Arguments\n- `metadata::MetaDataSLC`: Meta data for the Sentinel 1 swath\n- `indexOffset::Tuple{Int,Int}`: Pixel offeset of the subset with respect to the complete swath\n- `pixels::Array{Complex,2}`: The pixel values of the swath subset\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.SwathTiming","page":"Sentinel1","title":"Main.Sentinel1.SwathTiming","text":"SwathTiming\n\nreturns structure of SwathTiming from metadata in .xml\n\n\n\n\n\n","category":"type"},{"location":"Sentinel1/#Main.Sentinel1.SwathTiming-Tuple{Any}","page":"Sentinel1","title":"Main.Sentinel1.SwathTiming","text":"\" SwathTiming\n\nConstucture for the SwathTiming structure. \n\nIt takes a dictionary containing the full sentinel-1 swath metadata and extracts the SwathTiming as a structure. \n\nInput:\n    metaDict[dict]: a dictionary of the metadata.\n\noutput:\n    SwathTiming[structure of SwathTiming]\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.getAnnotationPaths-Tuple{String}","page":"Sentinel1","title":"Main.Sentinel1.getAnnotationPaths","text":"getAnnotationPaths(safePath::string)\n\nGetting the paths for the annotation files for a SLC image using its .SAFE folder path.\n\nParameters\n\n* safePath::String: path of .SAFE folder for one image.\n\nReturns\n\n* annotationPaths::Vector: Vector of paths for annotation files in .SAFE folder\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.readMetaDataSLC-Tuple{String}","page":"Sentinel1","title":"Main.Sentinel1.readMetaDataSLC","text":"readMetaDataSLC(filepath::String) Returns: ::MetaDataSLC\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.readSLC-Tuple{String, Any}","page":"Sentinel1","title":"Main.Sentinel1.readSLC","text":"readSLC(folder::String, window) Returns: ::Array{SwathSLC,1}\n\n\n\n\n\n","category":"method"},{"location":"Sentinel1/#Main.Sentinel1.readTiff","page":"Sentinel1","title":"Main.Sentinel1.readTiff","text":"readTiff(filepath::String, window=nothing, convertToDouble = true)\n\nRead a Sentinel 1 tiff file.\n# Examples:\n```jldoctest\njulia> filepath = \"s1a-iw3-slc-vv-20220918t074921-20220918t074946-045056-056232-006.tiff\"\njulia> data = readSwathSLC(filePath, [(501,600),(501,650)]);\njulia> typeof(data)\nMatrix{ComplexF64}\njulia> size(data)\n(100,150)\n```\n\n\n\n\n\n","category":"function"},{"location":"Sentinel1/#Main.Sentinel1.searchDir-Tuple{Any, Any}","page":"Sentinel1","title":"Main.Sentinel1.searchDir","text":"\"\n\nsearch dir\n\nSearching a directory for files with extention.\n\n\n\n\n\n","category":"method"},{"location":"VisualiseSAR/#VisualiseSAR","page":"VisualiseSAR","title":"VisualiseSAR","text":"","category":"section"},{"location":"VisualiseSAR/","page":"VisualiseSAR","title":"VisualiseSAR","text":"Modules = [VisualiseSAR]","category":"page"},{"location":"VisualiseSAR/#Main.VisualiseSAR.sar2grayimage-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T<:Real","page":"VisualiseSAR","title":"Main.VisualiseSAR.sar2grayimage","text":"sar2grayimage(data::AbstractArray; p_quantile = 0.85)\n\nMaps the data to values between 0 and 1 and convert into a grayscaled image.  The minimum data value is mapped to 0 and all values above the p_quantile is mapped to 1\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SARProcessing","category":"page"},{"location":"#SARProcessing","page":"Home","title":"SARProcessing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SARProcessing.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SARProcessing]","category":"page"},{"location":"#SARProcessing.ecef2geodetic-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"SARProcessing.ecef2geodetic","text":"ecef2geodetic(ecefcoordinate::Array{Real,1};                         semimajoraxis=6378137., flattening=1/298.257223563,                         tolerancelatitude = 1.e-12, tolerance_height = 1.e-5)\n\nConvert ECEF-coordinates [X,Y,Z] to geodetic-coordinates [latitude(radians),longitude(radians),height] (WGS-84) radians\n\n(Based on B.R. Bowring, \"The accuracy of geodetic latitude and height equations\",\nSurvey Review, v28 #218, October 1985 pp.202-206).\n\n\n\n\n\n","category":"method"},{"location":"#SARProcessing.ellipsoid_intersect-Union{Tuple{T}, Tuple{S}, Tuple{Vector{T}, Vector{S}}} where {S<:Real, T<:Real}","page":"Home","title":"SARProcessing.ellipsoid_intersect","text":"ellipsoidintersect(xsat::Array{Real,1},normalisedlineofsight::Array{Real,1};                                 semimajor_axis::Real=6378137.,flattening::Real=1/298.257223563)\n\nComputes the intersection between the satellite line of sight and the earth ellipsoid in ECEF-coordinates\n# Arguments\n- `x_sat::Array{Real,1}`: [X,Y,Z] position of the satellite in ECEF-coordinates.\n- `normalised_line_of_sight::Array{Real,1}`: Normalised Line of sight\n# Output\n- `x_0::Array{Real,1}`: intersection between line and ellipsoid in ECEF-coordinates.\n# Note:\nEquations follows I. Cumming and F. Wong (2005) p. 558-559\n\n\n\n\n\n","category":"method"},{"location":"#SARProcessing.geodetic2ecef-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"SARProcessing.geodetic2ecef","text":"geodetic2ecef(geodeticcoordinate::Array{Real,1}; semimajoraxis::Real=WGS84SEMIMAJORAXIS,     flattening::Real=WGS84_FLATTENING)\n\nConvert geodetic-coordinates [latitude(radians),longitude(radians),height] (WGS-84) to ECEF-coordinates [X,Y,Z]\n\n\n\n\n\n","category":"method"}]
}
